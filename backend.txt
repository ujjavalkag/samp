ubuntu@hotel-management-server:~$ cd hotel-management-backend
ubuntu@hotel-management-server:~/hotel-management-backend$ cat \
apps/bills/models.py \
apps/bills/views.py \
apps/bills/serializers.py \
apps/bills/urls.py \
apps/bills/permissions.py \
apps/bills/notifications.py \
apps/bills/utils.py \
apps/menu/models.py \
apps/menu/views.py \
apps/menu/serializers.py \
apps/menu/urls.py \
apps/menu/admin.py \
apps/menu/apps.py \
apps/core/models.py \
apps/core/serializers.py \
apps/core/views.py \
apps/core/urls.py \
apps/notifications/models.py \
apps/notifications/serializers.py \
apps/notifications/views.py \
apps/notifications/urls.py \
apps/rooms/models.py \
apps/rooms/serializers.py \
apps/rooms/views.py \
apps/rooms/urls.py \
apps/users/models.py \
apps/users/serializers.py \
apps/users/views.py \
apps/users/urls.py \
manage.py \
config/settings.py \
config/urls.py
from django.db import models
from apps.users.models import CustomUser
from apps.rooms.models import Room
from hashlib import md5
from datetime import datetime


class Bill(models.Model):
    BILL_TYPE_CHOICES = (
        ('restaurant', 'Restaurant'),
        ('room', 'Room'),
    )

    PAYMENT_METHOD_CHOICES = (
        ('cash', 'Cash'),
        ('card', 'Card'),
        ('upi', 'UPI'),
        ('online', 'Online'),
    )

    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    bill_type = models.CharField(max_length=20, choices=BILL_TYPE_CHOICES)
    receipt_number = models.CharField(max_length=64, unique=True, blank=True, null=True)
    customer_name = models.CharField(max_length=255, default="Guest")
    customer_phone = models.CharField(max_length=20, default="N/A")
    room = models.ForeignKey(Room, null=True, blank=True, on_delete=models.SET_NULL)
    created_at = models.DateTimeField(auto_now_add=True)
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)

    # ‚úÖ New field added for payment method
    payment_method = models.CharField(
        max_length=20,
        choices=PAYMENT_METHOD_CHOICES,
        default='cash'
    )

    def __str__(self):
        return f"{self.receipt_number or 'UNSET'} - {self.customer_name}"

    def save(self, *args, **kwargs):
        if not self.receipt_number:
            now = datetime.utcnow().strftime("%Y%m%d%H%M%S%f")
            hash_part = md5(f"{self.customer_name}{self.customer_phone}{now}".encode()).hexdigest()[:6].upper()
            self.receipt_number = f"RCPT-{now}-{hash_part}"
        super().save(*args, **kwargs)


class BillItem(models.Model):
    bill = models.ForeignKey(Bill, related_name='items', on_delete=models.CASCADE)
    item_name = models.CharField(max_length=255)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.item_name} x {self.quantity}"

from django.conf import settings
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.utils.timezone import now
from datetime import datetime
from django.shortcuts import get_object_or_404
from django.http import HttpResponse
from rest_framework.permissions import IsAuthenticated
from decimal import Decimal
import os

from .models import Bill, BillItem
from apps.menu.models import MenuItem
from apps.rooms.models import Room
from .permissions import IsAdminOrStaff
from .notifications import notify_admin_via_whatsapp
from .utils import render_to_pdf

from django.template.loader import render_to_string
from xhtml2pdf import pisa
from io import BytesIO

class DailyBillReportView(APIView):
    permission_classes = [IsAuthenticated, IsAdminOrStaff]

    def get(self, request):
        date_str = request.GET.get("date", now().strftime("%Y-%m-%d"))
        try:
            selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            return Response({"error": "Invalid date format. Use YYYY-MM-DD."}, status=400)

        bills = Bill.objects.filter(created_at__date=selected_date).select_related("user", "room").prefetch_related("items").order_by("created_at")

        html_content = render_to_string("bills/daily_report.html", {"bills": bills, "report_date": selected_date})
        pdf_output = BytesIO()
        pisa_status = pisa.CreatePDF(html_content, dest=pdf_output)

        if pisa_status.err:
            return Response({"error": "Error generating PDF"}, status=500)

        # Save PDF to a daily_reports folder
        folder = os.path.join(settings.MEDIA_ROOT, "daily_reports")
        os.makedirs(folder, exist_ok=True)
        file_path = os.path.join(folder, f"{date_str}.pdf")

        with open(file_path, "wb") as f:
            f.write(pdf_output.getvalue())

        return Response({"message": f"Daily report generated", "pdf_path": file_path}, status=200)

class CreateRestaurantBillView(APIView):
    permission_classes = [IsAdminOrStaff]

    def post(self, request):
        user = request.user
        items = request.data.get("items", [])
        customer_name = request.data.get("customer_name", "").strip()
        customer_phone = request.data.get("customer_phone", "").strip()
        notify_customer = request.data.get("notify_customer", False)
        payment_method = request.data.get("payment_method", "cash")
        apply_gst = request.data.get("apply_gst", False)

        if isinstance(apply_gst, str):
            apply_gst = apply_gst.lower() == 'true'

        if not items or not customer_name or not customer_phone:
            return Response({"error": "Customer name, phone, and items required"}, status=400)

        total = Decimal(0)
        for item in items:
            try:
                menu_item = MenuItem.objects.get(id=item["item_id"])
                total += Decimal(menu_item.price) * item["quantity"]
            except MenuItem.DoesNotExist:
                continue

        gst_amount = Decimal(0)
        gst_rate = Decimal("0.00")

        if apply_gst:
            gst_rate = Decimal("0.05")  # ‚úÖ Fixed 5% GST
            gst_amount = (total * gst_rate).quantize(Decimal("0.01"))
            total += gst_amount

        bill = Bill.objects.create(
            user=user,
            bill_type='restaurant',
            customer_name=customer_name,
            customer_phone=customer_phone,
            total_amount=total,
            payment_method=payment_method
        )

        for item in items:
            try:
                menu_item = MenuItem.objects.get(id=item["item_id"])
                BillItem.objects.create(
                    bill=bill,
                    item_name=menu_item.name_en,
                    quantity=item["quantity"],
                    price=menu_item.price
                )
            except MenuItem.DoesNotExist:
                continue

        folder = os.path.join(settings.MEDIA_ROOT, "bills", datetime.now().strftime("%Y-%m"))
        os.makedirs(folder, exist_ok=True)
        filename = f"{bill.receipt_number}.pdf"
        pdf_path = os.path.join(folder, filename)

        # ‚úÖ Pass gst_rate to PDF context as percentage (e.g., 5.00)
        render_to_pdf("bills/bill_pdf.html", {
            "bill": bill,
            "items": bill.items.all(),
            "gst": gst_amount,
            "gst_rate": gst_rate * 100,
        }, pdf_path)

        # WhatsApp
        notify_admin_via_whatsapp(
            f"üçΩÔ∏è New Restaurant Bill\nCustomer: {customer_name}\nPhone: {customer_phone}\nTotal: ‚Çπ{total}\nReceipt: {bill.receipt_number}"
        )

        if notify_customer:
            notify_admin_via_whatsapp(
                f"Hi {customer_name}, your restaurant bill is ‚Çπ{total}. Receipt: {bill.receipt_number}",
                to=customer_phone,
                pdf_path=pdf_path
            )

        return Response({
            "message": "Restaurant bill created",
            "bill_id": bill.id,
            "receipt_number": bill.receipt_number,
            "payment_method": bill.payment_method,
            "gst_applied": apply_gst,
            "gst_amount": float(gst_amount),
            "gst_rate": float(gst_rate * 100)  # ‚úÖ Send GST rate to frontend
        }, status=201)


class CreateRoomBillView(APIView):
    permission_classes = [IsAdminOrStaff]

    def post(self, request):
        user = request.user
        customer_name = request.data.get("customer_name", "").strip()
        customer_phone = request.data.get("customer_phone", "").strip()
        room_id = request.data.get("room")
        days = int(request.data.get("days", 1))
        notify_customer = request.data.get("notify_customer", False)
        payment_method = request.data.get("payment_method", "cash")
        apply_gst = request.data.get("apply_gst", False)

        if isinstance(apply_gst, str):
            apply_gst = apply_gst.lower() == "true"

        if not customer_name or not customer_phone or not room_id:
            return Response({"error": "Customer name, phone and room required"}, status=400)

        try:
            room = Room.objects.get(id=room_id)
        except Room.DoesNotExist:
            return Response({"error": "Room not found"}, status=404)

        base_total = Decimal(room.price_per_day) * days
        gst_amount = Decimal(0)
        gst_rate = Decimal(0)

        if apply_gst:
            if base_total < 1000:
                gst_rate = Decimal("0.00")
            elif 1000 <= base_total < 7500:
                gst_rate = Decimal("0.05")
            else:
                gst_rate = Decimal("0.12")
            gst_amount = (base_total * gst_rate).quantize(Decimal("0.01"))

        total = base_total + gst_amount

        bill = Bill.objects.create(
            user=user,
            bill_type='room',
            customer_name=customer_name,
            customer_phone=customer_phone,
            room=room,
            total_amount=total,
            payment_method=payment_method
        )

        BillItem.objects.create(
            bill=bill,
            item_name=room.type,
            quantity=days,
            price=room.price_per_day
        )

        folder = os.path.join(settings.MEDIA_ROOT, "bills", datetime.now().strftime("%Y-%m"))
        os.makedirs(folder, exist_ok=True)
        filename = f"{bill.receipt_number}.pdf"
        pdf_path = os.path.join(folder, filename)
        render_to_pdf("bills/bill_pdf.html", {"bill": bill, "items": bill.items.all(), "gst": gst_amount}, pdf_path)

        # WhatsApp
        notify_admin_via_whatsapp(
            f"üõèÔ∏è New Room Bill\nCustomer: {customer_name}\nPhone: {customer_phone}\nRoom: {room.type}\nDays: {days}\nTotal: ‚Çπ{total}\nReceipt: {bill.receipt_number}"
        )

        if notify_customer:
            notify_admin_via_whatsapp(
                f"Hi {customer_name}, your room bill is ‚Çπ{total} for {days} day(s). Receipt: {bill.receipt_number}",
                to=customer_phone,
                pdf_path=pdf_path
            )

        return Response({
            "message": "Room bill created",
            "bill_id": bill.id,
            "receipt_number": bill.receipt_number,
            "payment_method": bill.payment_method,
            "gst_applied": apply_gst,
            "gst_amount": float(gst_amount),
            "gst_rate": float(gst_rate)
        }, status=201)


class BillPDFView(APIView):
    permission_classes = [IsAuthenticated, IsAdminOrStaff]

    def get(self, request, pk):
        bill = get_object_or_404(Bill, pk=pk)
        pdf_path = os.path.join(settings.MEDIA_ROOT, "bills", bill.created_at.strftime("%Y-%m"), f"{bill.receipt_number}.pdf")

        if not os.path.exists(pdf_path):
            return Response({"error": "PDF not found"}, status=404)

        with open(pdf_path, "rb") as f:
            response = HttpResponse(f.read(), content_type="application/pdf")
            response["Content-Disposition"] = f"inline; filename={bill.receipt_number}.pdf"
            return response


class BillDetailView(APIView):
    permission_classes = [IsAuthenticated, IsAdminOrStaff]

    def get(self, request, pk):
        bill = get_object_or_404(Bill.objects.select_related("user", "room").prefetch_related("items"), pk=pk)

        data = {
            "id": bill.id,
            "receipt_number": bill.receipt_number,
            "bill_type": bill.bill_type,
            "total_amount": float(bill.total_amount),
            "payment_method": bill.payment_method,
            "customer_name": bill.customer_name,
            "customer_phone": bill.customer_phone,
            "user_email": bill.user.email,
            "room_name": bill.room.type if bill.room else None,
            "created_at": bill.created_at.isoformat(),
            "items": [
                {
                    "name": item.item_name,
                    "quantity": item.quantity,
                    "price": float(item.price),
                    "total": float(item.price * item.quantity)
                } for item in bill.items.all()
            ]
        }

        return Response(data)

from rest_framework import serializers
from .models import Bill, BillItem

class BillItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = BillItem
        fields = ['item_name', 'quantity', 'price']

class BillSerializer(serializers.ModelSerializer):
    items = BillItemSerializer(many=True)

    class Meta:
        model = Bill
        fields = ['id', 'bill_type', 'created_at', 'total_amount', 'items']

    def create(self, validated_data):
        items_data = validated_data.pop('items')
        bill = Bill.objects.create(**validated_data)

        for item_data in items_data:
            BillItem.objects.create(bill=bill, **item_data)

        return bill

from . import views
from django.urls import path
from .analytics import BillHistoryView, BillAnalyticsView, BillSummaryView
from .views import (
    CreateRestaurantBillView,
    CreateRoomBillView,
    BillPDFView,
    BillDetailView,
    DailyBillReportView,
)

urlpatterns = [
    path("create/restaurant/", CreateRestaurantBillView.as_view(), name="create-restaurant-bill"),
    path("create/room/", CreateRoomBillView.as_view(), name="create-room-bill"),
    path("summary/", BillSummaryView.as_view(), name="bill-summary"),
    path("analytics/", BillAnalyticsView.as_view()),
    path("history/", BillHistoryView.as_view(), name="bill-history"),  # ‚úÖ ADD THIS LINE
    path("<int:pk>/pdf/", BillPDFView.as_view(), name="bill-pdf"),
    path("<int:pk>/", BillDetailView.as_view(), name="bill-detail"),
    path("daily-report/", DailyBillReportView.as_view(), name="daily-report"),
]

# apps/bills/permissions.py

from rest_framework.permissions import BasePermission

class IsAdminOrStaff(BasePermission):
    """
    Allows access only to admin and staff users.
    """
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role in ['admin', 'staff']

# apps/bills/notifications.py

import os
import logging
from twilio.rest import Client

logger = logging.getLogger(__name__)

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_FROM = os.getenv("TWILIO_WHATSAPP_FROM")  # e.g. whatsapp:+14155238886
DEFAULT_ADMIN_WHATSAPP = os.getenv("ADMIN_WHATSAPP_TO")   # e.g. whatsapp:+91XXXXXXXXXX

client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)


def notify_admin_via_whatsapp(message, to=None, media_url=None):
    """
    Send a WhatsApp message via Twilio.
    If `to` is None, message is sent to ADMIN_WHATSAPP_TO (single or comma-separated).
    `media_url` should be a public URL to the PDF.
    """
    if not all([TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_WHATSAPP_FROM]):
        logger.warning("Twilio config missing. Skipping WhatsApp notification.")
        return

    recipients = [to] if to else DEFAULT_ADMIN_WHATSAPP.split(",")

    for number in recipients:
        number = number.strip()
        if not number.startswith("whatsapp:"):
            number = f"whatsapp:{number}"
        try:
            message_data = {
                "from_": TWILIO_WHATSAPP_FROM,
                "to": number,
                "body": message,
            }
            if media_url:
                message_data["media_url"] = [media_url]
            client.messages.create(**message_data)
            logger.info(f"WhatsApp sent to {number}")
        except Exception as e:
            logger.error(f"Failed WhatsApp to {number}: {e}")


def send_sms_text(message, to):
    """Future-ready: Twilio SMS API placeholder"""
    logger.info(f"[SMS Placeholder] Would send to {to}: {message}")

# apps/bills/utils.py
import os
from django.template.loader import get_template
from django.conf import settings
from xhtml2pdf import pisa

def render_to_pdf(template_src, context_dict, output_path):
    template = get_template(template_src)
    html = template.render(context_dict)
    with open(output_path, "wb") as f:
        pisa_status = pisa.CreatePDF(html, dest=f)
    return not pisa_status.err

from django.db import models

class MenuCategory(models.Model):
    name_en = models.CharField(max_length=255)
    name_hi = models.CharField(max_length=255)

    def __str__(self):
        return self.name_en

class MenuItem(models.Model):
    name_en = models.CharField(max_length=255)
    name_hi = models.CharField(max_length=255)
    description_en = models.TextField(blank=True, null=True)
    description_hi = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    available = models.BooleanField(default=True)
    category = models.ForeignKey(MenuCategory, on_delete=models.SET_NULL, null=True, blank=True)
    image = models.ImageField(upload_to='menu_images/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name_en

from rest_framework import viewsets, permissions
from .models import MenuItem, MenuCategory
from .serializers import MenuItemSerializer, MenuCategorySerializer

class IsAdminOrReadOnly(permissions.BasePermission):
    """
    Admin users can create/update/delete, others (staff) can only view.
    """
    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True
        return request.user.is_authenticated and request.user.role == 'admin'

class MenuItemViewSet(viewsets.ModelViewSet):
    queryset = MenuItem.objects.all().order_by('-created_at')
    serializer_class = MenuItemSerializer
    permission_classes = [IsAdminOrReadOnly]

class MenuCategoryViewSet(viewsets.ModelViewSet):
    queryset = MenuCategory.objects.all()
    serializer_class = MenuCategorySerializer
    permission_classes = [IsAdminOrReadOnly]

from rest_framework import serializers
from .models import MenuItem, MenuCategory

class MenuCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = MenuCategory
        fields = ['id', 'name_en', 'name_hi']

class MenuItemSerializer(serializers.ModelSerializer):
    category = MenuCategorySerializer(read_only=True)
    category_id = serializers.PrimaryKeyRelatedField(
        queryset=MenuCategory.objects.all(), source='category', write_only=True
    )

    class Meta:
        model = MenuItem
        fields = [
            'id',
            'name_en',
            'name_hi',
            'description_en',
            'description_hi',
            'price',
            'available',
            'category',
            'category_id',
            'image',
            'created_at',
            'updated_at',
        ]

from rest_framework.routers import DefaultRouter
from .views import MenuItemViewSet, MenuCategoryViewSet

router = DefaultRouter()
router.register(r'items', MenuItemViewSet, basename='menu-items')
router.register(r'categories', MenuCategoryViewSet, basename='menu-categories')

urlpatterns = router.urls

from django.contrib import admin

# Register your models here.
from django.apps import AppConfig


class MenuConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.menu'
#from django.contrib.auth.models import AbstractUser
#from django.db import models

#class CustomUser(AbstractUser):
#    ROLE_CHOICES = (
#        ('admin', 'Admin'),
#        ('employee', 'Employee'),
#    )
#    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default='employee')

#    def __str__(self):
#        return f"{self.username} ({self.role})"

from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'role')

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .serializers import UserSerializer

class ProfileView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        serializer = UserSerializer(request.user)
        return Response(serializer.data)

from django.urls import path
from .views import ProfileView
from .token_views import MyTokenObtainPairView

urlpatterns = [
    path('profile/', ProfileView.as_view(), name='profile'),
    path('token/', MyTokenObtainPairView.as_view(), name='token_obtain_pair'),
]

from django.db import models

class NotificationRecipient(models.Model):
    name = models.CharField(max_length=100)
    phone_number = models.CharField(max_length=15, blank=True, null=True)
    email = models.EmailField(blank=True, null=True)
    upi_id = models.CharField(max_length=50, blank=True, null=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.name} - {self.email or self.phone_number}"

from rest_framework import serializers
from .models import NotificationRecipient

class NotificationRecipientSerializer(serializers.ModelSerializer):
    class Meta:
        model = NotificationRecipient
        fields = '__all__'

from rest_framework import generics, permissions
from .models import NotificationRecipient
from .serializers import NotificationRecipientSerializer

class NotificationRecipientListCreateView(generics.ListCreateAPIView):
    queryset = NotificationRecipient.objects.all()
    serializer_class = NotificationRecipientSerializer
    permission_classes = [permissions.IsAuthenticated]

class NotificationRecipientRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = NotificationRecipient.objects.all()
    serializer_class = NotificationRecipientSerializer
    permission_classes = [permissions.IsAuthenticated]

from django.urls import path
from .views import NotificationRecipientListCreateView, NotificationRecipientRetrieveUpdateDestroyView

urlpatterns = [
    path('', NotificationRecipientListCreateView.as_view(), name='notification-recipient-list-create'),
    path('<int:pk>/', NotificationRecipientRetrieveUpdateDestroyView.as_view(), name='notification-recipient-detail'),
]

# apps/rooms/models.py
from django.db import models

class Room(models.Model):
    type_en = models.CharField(max_length=100)
    type_hi = models.CharField(max_length=100)
    description_en = models.TextField(blank=True, null=True)
    description_hi = models.TextField(blank=True, null=True)
    price_per_day = models.DecimalField(max_digits=10, decimal_places=2)
    price_per_hour = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.type_en  # fallback to English for admin display

# apps/rooms/serializers.py
from rest_framework import serializers
from .models import Room

class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model = Room
        fields = '__all__'

from rest_framework import viewsets, permissions
from .models import Room
from .serializers import RoomSerializer
from apps.bills.permissions import IsAdminOrStaff

class RoomViewSet(viewsets.ModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer
    permission_classes = [IsAdminOrStaff]

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import RoomViewSet

router = DefaultRouter()
router.register(r"", RoomViewSet)

urlpatterns = [
    path("", include(router.urls)),
]

from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models


class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, role='staff', **extra_fields):
        if not email:
            raise ValueError("Email must be provided")
        email = self.normalize_email(email)
        user = self.model(email=email, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, password, role="admin", **extra_fields)


class CustomUser(AbstractBaseUser, PermissionsMixin):
    ROLE_CHOICES = (
        ('admin', 'Admin'),
        ('staff', 'Staff'),
    )

    email = models.EmailField(unique=True)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from rest_framework import serializers
from rest_framework.exceptions import AuthenticationFailed
from .models import CustomUser

class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        try:
            data = super().validate(attrs)
            data['email'] = self.user.email
            data['role'] = self.user.role
            return data
        except AuthenticationFailed:
            raise AuthenticationFailed(detail="Invalid email or password.")

    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)
        token['email'] = user.email
        token['role'] = user.role
        return token

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ['id', 'email', 'role']

# apps/users/views.py

from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.permissions import BasePermission
from rest_framework_simplejwt.views import TokenObtainPairView
from django.db import transaction

from .models import CustomUser
from .serializers import CustomTokenObtainPairSerializer, UserSerializer

from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.token_blacklist.models import BlacklistedToken, OutstandingToken

class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer


class IsAdminRole(BasePermission):
    """
    Grants access only to authenticated users with role='admin'.
    """
    def has_permission(self, request, view):
        return request.user.is_authenticated and getattr(request.user, "role", None) == "admin"


class StaffUserViewSet(viewsets.ViewSet):
    permission_classes = [IsAdminRole]

    def list(self, request):
        """
        List all users with role = 'staff'.
        """
        staff_users = CustomUser.objects.filter(role="staff")
        serializer = UserSerializer(staff_users, many=True)
        return Response(serializer.data)

    def create(self, request):
        """
        Create a new staff user.
        """
        email = request.data.get("email", "").strip().lower()
        password = request.data.get("password", "").strip()

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        if CustomUser.objects.filter(email=email).exists():
            return Response({"error": "Email already exists."}, status=status.HTTP_409_CONFLICT)

        with transaction.atomic():
            user = CustomUser.objects.create_user(
                email=email,
                password=password,
                role="staff"
            )

        return Response(UserSerializer(user).data, status=status.HTTP_201_CREATED)

    def destroy(self, request, pk=None):
        """
        Delete a staff user by ID.
        """
        try:
            user = CustomUser.objects.get(id=pk, role="staff")
            user.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except CustomUser.DoesNotExist:
            return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

class LogoutView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            refresh_token = request.data.get("refresh")
            token = RefreshToken(refresh_token)
            token.blacklist()

            return Response({"detail": "Logout successful"}, status=status.HTTP_205_RESET_CONTENT)
        except Exception as e:
            return Response({"error": "Invalid token or already logged out"}, status=status.HTTP_400_BAD_REQUEST)

from django.urls import path
from .views import LogoutView
from .views import CustomTokenObtainPairView, StaffUserViewSet

staff_view = StaffUserViewSet.as_view({
    'get': 'list',
    'post': 'create',
})

staff_detail = StaffUserViewSet.as_view({
    'delete': 'destroy',
})

urlpatterns = [
    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('staff/', staff_view, name='staff-list-create'),
    path('staff/<int:pk>/', staff_detail, name='staff-delete'),
    path("logout/", LogoutView.as_view(), name="logout"),
]

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Base Directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret Key and Debug
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'unsafe-default-secret')
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

# Allowed Hosts
ALLOWED_HOSTS = [
    'hotelrshammad.co.in',
    'www.hotelrshammad.co.in',
    '144.24.127.172',
    '127.0.0.1',
    'localhost',
]

# CSRF Trusted Origins
CSRF_TRUSTED_ORIGINS = [
    'https://hotelrshammad.co.in',
    'https://www.hotelrshammad.co.in',
    'http://127.0.0.1',
    'http://localhost',
]

# Installed Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',

    'apps.users',
    'apps.menu',
    'apps.rooms',
    'apps.bills',
    'apps.notifications',
]

# Middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# URL Configuration
ROOT_URLCONF = 'config.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI Application
WSGI_APPLICATION = 'config.wsgi.application'

# Database - PostgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'hotel_db'),
        'USER': os.getenv('POSTGRES_USER', 'hotel_admin'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'new_secure_ujjaval'),
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

# Password Validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True

# Static Files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'styles'),
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Automatically collect static from app/static
for app in os.listdir(os.path.join(BASE_DIR, "apps")):
    app_static_path = os.path.join(BASE_DIR, "apps", app, "static")
    if os.path.exists(app_static_path):
        STATICFILES_DIRS.append(app_static_path)

# Default Auto Field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "https://hotelrshammad.co.in",
    "https://www.hotelrshammad.co.in",
    "http://127.0.0.1:3000",  # local frontend dev if needed
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'apps.users.authentication.CustomJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'SIGNING_KEY': SECRET_KEY,
}

# Oracle Cloud Storage (for backup/upload)
ORACLE_STORAGE_REGION = os.getenv('ORACLE_STORAGE_REGION')
ORACLE_STORAGE_NAMESPACE = os.getenv('ORACLE_STORAGE_NAMESPACE')
ORACLE_BUCKET_NAME = os.getenv('ORACLE_BUCKET_NAME')
ORACLE_ACCESS_KEY = os.getenv('ORACLE_ACCESS_KEY')
ORACLE_SECRET_KEY = os.getenv('ORACLE_SECRET_KEY')

AUTH_USER_MODEL = 'users.CustomUser'
from django.contrib import admin
from django.urls import path, include
from apps.users.views import CustomTokenObtainPairView
from rest_framework_simplejwt.views import TokenRefreshView
urlpatterns = [
    path('api/auth/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    #path('api/auth/token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('admin/', admin.site.urls),
    path('api/core/', include('apps.core.urls')),
    path('api/menu/', include('apps.menu.urls')),
    path('api/rooms/', include('apps.rooms.urls')),
    path('api/users/', include('apps.users.urls')),
    path('api/bills/', include('apps.bills.urls')),
    path('api/notifications/', include('apps.notifications.urls')),
]

ubuntu@hotel-management-server:~/hotel-management-backend$
